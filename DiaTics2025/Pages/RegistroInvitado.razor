@page "/registroInvitado"
@using Domain
@using Domain.Entities
@using Domain.Interfaces
@inject IInvitadoItf _invitadoService

<section id="Registro" class="registro section mt-5">


    <div class="container section-title" data-aos="fade-up">
        <NavLink href="/registroAlumno">
            <h2 class="me-2">Alumnos</h2>
        </NavLink>
        <h2 class="active">Invitados</h2>
        <p>Registro</p>
    </div>
    @if (cargando)
    {
        <div class="vh-100 d-flex align-items-center justify-content-center gap-3">
            <div class="h5 spinner-border"></div>
            <div class="h2">Please wait</div>
        </div>
    }
    <div class="container" data-aos="fade-up" data-aos-delay="100">
        <!-- Aquí se pasa el modelo a EditForm -->
        <EditForm Model="@invitado" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />

            <div class="row justify-content-center gy-4 ">
                <div class="container">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="nombre" class="form-label">Nombre</label>
                            <InputText id="nombre" class="form-control" @bind-Value="invitado.Nombre" @oninput="OnInputChanged" />
                            <ValidationMessage For="@(() => invitado.Nombre)" />
                        </div>

                        <div class="col-md-6">
                            <label for="apellidoPaterno" class="form-label">Apellido paterno</label>
                            <InputText id="apellidoPaterno" class="form-control" @bind-Value="invitado.ApellidoPaterno" @oninput="OnInputChanged" />
                            <ValidationMessage For="@(() => invitado.ApellidoPaterno)" />
                        </div>

                        <div class="col-md-6">
                            <label for="apellidoMaterno" class="form-label">Apellido materno</label>
                            <InputText id="apellidoMaterno" class="form-control" @bind-Value="invitado.ApellidoMaterno" @oninput="OnInputChanged" />
                            <ValidationMessage For="@(() => invitado.ApellidoMaterno)" />
                        </div>

                        <div class="col-md-6">
                            <label for="escuela" class="form-label">Escuela</label>
                            <InputText id="escuela" class="form-control" @bind-Value="invitado.Escuela" @oninput="OnInputChanged" />
                            <ValidationMessage For="@(() => invitado.Escuela)" />
                        </div>

                        <div class="col-md-6">
                            <label for="correo" class="form-label">Correo electrónico</label>
                            <InputText id="correo" class="form-control" @bind-Value="invitado.CorreoElectronico" />
                            <ValidationMessage For="@(() => invitado.CorreoElectronico)" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col text-center">
                    <button class="btn btn-primary" disabled="@(!formIsValid)">Registrar al evento</button>
                </div>
            </div>
        </EditForm>
    </div>

</section>

@code {
    private bool cargando = false;
    private bool formIsValid = false;

    // Modelo para el registro de un invitado
    private InvitadoEtd invitado = new InvitadoEtd();

    // Método que se invoca cuando el formulario se envía correctamente
    private async Task HandleValidSubmit()
    {
        cargando = true;
        var result = await _invitadoService.Registrar_Invitado(invitado);
        Console.WriteLine(result);
        cargando = false;
    }

    // Actualiza la validez del formulario al modificar cualquier campo
    private void OnInputChanged()
    {
        formIsValid = !string.IsNullOrEmpty(invitado.Nombre);
    }
}